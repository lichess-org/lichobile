{
  "name": "chessground",
  "version": "1.3.0",
  "description": "Multipurpose chess UI, for lichess.org web and mobile",
  "main": "src/main.js",
  "directories": {
    "example": "examples"
  },
  "dependencies": {
    "lodash-node": "^2.4.1",
    "mithril": "^0.1.22"
  },
  "devDependencies": {
    "browserify": "~5.11.2",
    "gulp": "~3.8.8",
    "gulp-jshint": "~1.8.4",
    "gulp-streamify": "0.0.5",
    "gulp-uglify": "^1.0.1",
    "gulp-util": "~3.0.1",
    "vinyl-source-stream": "~1.0.0",
    "watchify": "~1.0.2"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ornicar/chessground.git"
  },
  "keywords": [
    "chess",
    "lichess.org",
    "chessboard",
    "UI"
  ],
  "author": {
    "name": "Thibault Duplessis",
    "url": "https://github.com/ornicar"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ornicar/chessground/issues"
  },
  "homepage": "https://github.com/ornicar/chessground",
  "readme": "# ChessGround - multipurpose chess UI.\n\nChessground targets all modern browsers, as well as mobile development using Cordova.\n\nSee it in action on [lichess.org board editor](http://lichess.org/editor)\nand [lichess.org puzzle solver](http://lichess.org/training).\n\nNote that Chessground is only the UI, and has no knowledge of the rules of chess.\nYou have to feed it with the correct moves using backend or frontend chess logic.\n\n### Demo\n\n[http://lichess.org/training](http://lichess.org/training)\n\n### Dependencies\n\n- [mithril.js](https://github.com/lhorie/mithril.js) - a minimalist virtual DOM library\n- [lodash-node](https://github.com/lodash/lodash-node) - just a handful of selected functions, not the whole thing\n\n## Features\n\nChessground is designed to fulfill all lichess.org web and mobile apps needs, so it is pretty featureful.\n\n- Fast. Uses virtual DOM; runs smoothly on elder mobile phones\n- Small footprint: 13K gzipped (38K unzipped) including dependencies\n- Standalone, or composable as a mithril.js module\n- Entirely configurable and reconfigurable at any time\n- Styling with CSS: board and pieces can be changed by simply switching a class\n- Fluid layout: board can be resized at any time\n- Support for pieces larger than squares (for 3D)\n- Full mobile support (touchstart, touchmove, touchend)\n- Move pieces by click\n- Move pieces by drag'n drop\n  - minimum distance before drag\n  - centralisation of the piece under the cursor\n  - square target element for mobile\n  - piece ghost\n  - drop off revert or trash\n- Premove by click or drag\n- Animation of pieces: moving and fading away\n- Display last move, check, move destinations, and premove destinations\n- Import and export positions in FEN notation\n- User callbacks\n- No chess logic inside: can be used for chess variations\n\n## Installation\n\n```\nnpm install --save chessground\n```\n\n### Usage\n\n```js\nvar Chessground = require(\"chessground\");\n\nvar ground = Chessground(document.body, options);\n```\n\n## Options\n\nAll options are, well, optional.\n\n```js\n{\n  orientation: \"white\",   // board orientation (or view angle) \"white\" | \"black\"\n  turnColor: \"white\",     // turn to play. \"white\" | \"black\"\n  check: null,            // square currently in check \"a2\" | null\n  lastMove: null,         // squares part of the last move [\"c3\", \"c4\"] | null\n  selected: null,         // square currently selected \"a1\" | null\n  highlight: {\n    lastMove: true,       // add last-move class to squares\n    check: true,          // add check class to squares\n    dragOver: true        // add drag-over class to square when dragging over it\n  },\n  animation: {\n    enabled: true,        // enable piece animations, moving and fading\n    duration: 200,        // animation duration in milliseconds\n  },\n  movable: {\n    free: true,           // all moves are valid - board editor\n    color: \"both\",        // color that can move. \"white\" | \"black\" | \"both\" | null\n    dests: {},            // valid moves. {a2: [\"a3\", \"a4\"], b1: [\"a3\", \"c3\"]} | null\n    dropOff: \"revert\",    // when a piece is dropped outside the board. \"revert\" | \"trash\"\n    showDests: true,      // add the move-dest class to squares\n    events: {\n                          // called after the move has been played\n      after: function(orig, dest) {}\n    }\n  },\n  premovable: {\n    enabled: true,        // allow premoves for color that can not move\n    showDests: true,      // add the premove-dest class to squares\n    current: null         // keys of the current saved premove [\"e2\", \"e4\"] | null\n  },\n  draggable: {\n    enabled: true,        // allow moves & premoves to use drag'n drop\n    distance: 3,          // minimum distance to initiate a drag, in pixels\n    squareTarget: false,  // display big square target; intended for mobile\n    centerPiece: true,    // center the piece on cursor at drag start\n    showGhost: true,      // show ghost of piece being dragged\n  },\n  events: {\n    change: function() {} // called after the situation changes on the board\n  }\n}\n```\n\n## A.P.I.\n\nThere are a few functions you can call on a Chessground instance:\n\n### Setters\n\n```js\nvar ground = Chessground(document.body, options);\n\n// reconfigure the instance. Accepts all options mentioned above.\n// board will be animated accordingly, if animations are enabled.\nground.set(options);\n\n// sets the king of this color in check\n// if no color is provided, the current turn color is used\nground.setCheck(color);\n\n// change the view angle\nground.toggleOrientation();\n\n// perform a move programmatically\nground.move(\"e2\", \"e4\");\n\n// add and/or remove arbitrary pieces on the board\nground.setPieces({a1: null, c5: {color: \"black\", role: \"queen\"}});\n\n// play the current premove, if any\nground.playPremove();\n```\n\n### Getters\n\n```js\n// get the view angle\nvar orientation = ground.getOrientation();\n\n// get pieces on the board\n// {a1: {color: \"white\", role: \"rook\"}, b1: {color: \"white\", role: \"knight\"}}\nvar pieces = ground.getPieces();\n\n// get the current FEN position\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR\nvar fen = ground.getFen();\n```\n",
  "readmeFilename": "README.md",
  "_id": "chessground@1.3.0",
  "dist": {
    "shasum": "e00b7e6dd3f27c374c82ff9273e8846a912c2cc9"
  },
  "_resolved": "git://github.com/ornicar/chessground#1a9f2e4d823eec8436ce715e7f4a9061e70ff064",
  "_from": "git://github.com/ornicar/chessground",
  "_fromGithub": true
}
