{
  "name": "accord",
  "version": "0.11.1",
  "author": {
    "name": "Jeff Escalante",
    "email": "hello@jenius.me"
  },
  "description": "A unified interface for compiled languages and templates in JavaScript",
  "main": "lib",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/jenius/accord"
  },
  "dependencies": {
    "fobject": "0.x",
    "glob": "4.x",
    "indx": "0.1.x",
    "lodash": "2.x",
    "resolve": "0.7.x",
    "uglify-js": "2.x",
    "when": "3.x"
  },
  "devDependencies": {
    "coffee-script": "1.7.x",
    "mocha": "*",
    "should": "*",
    "swig": "*",
    "jade": "*",
    "ejs": "*",
    "marked": "*",
    "marc": "*",
    "hogan.js": "*",
    "handlebars": "*",
    "hamljs": "*",
    "stylus": "*",
    "node-sass": "*",
    "less": "*",
    "myth": "*",
    "dogescript": "*",
    "coco": "*",
    "LiveScript": "*",
    "uglifyjs": "*",
    "clean-css": "*",
    "html-minifier": "*",
    "csso": "*",
    "acorn": "*",
    "css-parse": "*",
    "parse5": "*",
    "coveralls": "2.x",
    "mocha-lcov-reporter": "0.0.1",
    "istanbul": "0.2.x"
  },
  "scripts": {
    "test": "mocha",
    "coveralls": "make build; istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage; make unbuild"
  },
  "readme": "accord\n======\n\nA unified interface for compiled languages and templates in JavaScript.\n\n[![npm](http://img.shields.io/npm/v/accord.svg?style=flat)](http://badge.fury.io/js/accord)\n[![tests](http://img.shields.io/travis/jenius/accord/master.svg?style=flat)](https://travis-ci.org/jenius/accord)\n[![coverage](http://img.shields.io/coveralls/jenius/accord/master.svg?style=flat)](https://coveralls.io/r/jenius/accord?branch=master)\n[![dependencies](http://img.shields.io/gemnasium/jenius/accord.svg?style=flat)](https://david-dm.org/jenius/accord)\n\n### Why should you care?\n\nThere are two other libraries that already attempt to provide a common compiler interface: [consolidate.js](https://github.com/visionmedia/consolidate.js) and [transformers](https://github.com/ForbesLindesay/transformers). After reviewing & using both of them, we designed accord to provide a more maintainable code base and way of writing adapters.\n\nAccord adapters are different because they use standard JavaScript inheritance (aka: classes in CoffeeScript), and they avoid the issues with the mixture of sync and async compilers by using promises for everything.\n\n### Installation\n\n`npm install accord`\n\n### Usage\n\nAccord itself exposes only a JavaScript API. If you are interested in using this library from the command line, check out the [accord-cli](https://github.com/carrot/accord-cli) project.\n\nSince some templating engines are async and others are not, accord keeps things consistent by returning a promise for any task (using [when.js](https://github.com/cujojs/when)). Here's an example in CoffeeScript:\n\n```coffee\nfs = require 'fs'\naccord = require 'accord'\njade = accord.load('jade')\n\n# render a string\njade.render('body\\n  .test')\n  .catch(console.error.bind(console))\n  .done(console.log.bind(console))\n\n# or a file\njade.renderFile('./example.jade')\n  .catch(console.error.bind(console))\n  .done(console.log.bind(console))\n\n# or compile a string to a function\n# (only some to-html compilers support this, see below)\njade.compile('body\\n  .test')\n  .catch(console.error.bind(console))\n  .done (res) -> console.log(res.toString())\n\n# or a file\njade.compileFile('./example.jade')\n  .catch(console.error.bind(console))\n  .done (res) -> console.log(res.toString())\n\n# compile a client-side js template\njade.compileClient('body\\n  .test')\n  .catch(console.error.bind(console))\n  .done (res) -> console.log(res.toString())\n\n# or a file\njade.compileFileClient('./example.jade')\n  .catch(console.error.bind(console))\n  .done (res) -> console.log(res.toString())\n\n```\n\nDocs below should explain the methods executed in the example above.\n\n### Accord Methods\n\n- `accord.load(string, object)` - loads the compiler named in the first param, npm package with the name must be installed locally, or the optional second param must be the compiler you are after. The second param allows you to load the compiler from elsewhere or load an alternate version if you want, but be careful.\n\n- `accord.supports(string)` - quick test to see if accord supports a certain compiler. accepts a string, which is the name of language (like markdown) or a compiler (like marked), returns a boolean.\n\n### Accord Adapter Methods\n\n- `adapter.name`\n- `adapter.render(string, options)` - render a string to a compiled string\n- `adapter.renderFile(path, options)` - render a file to a compiled string\n- `adapter.compile(string, options)` - compile a string to a function\n- `adapter.compileFile(path, options)` - compile a file to a function\n- `adapter.compileClient(string, options)` - compile a string to a client-side-ready function\n- `adapter.compileFileClient(string, options)` - compile a file to a client-side-ready function\n- `adapter.clientHelpers()` - some adapters that compile for client also need helpers, this method returns a string of minfied JavaScript with all of them\n- `adapter.extensions` - array of all file extensions the compiler should match\n- `adapter.output` - string, expected output extension\n- `adapter.compiler` - the actual compiler, no adapter wrapper, if you need it\n\n### Supported Languages\n\n#### HTML\n\n- [jade](http://jade-lang.com/)\n- [ejs](https://github.com/visionmedia/ejs)\n- [markdown](https://github.com/chjj/marked)\n- [mustache/hogan](https://github.com/twitter/hogan.js)\n- [handlebars](https://github.com/wycats/handlebars.js)\n- [haml](https://github.com/visionmedia/haml.js)\n- [swig](http://paularmstrong.github.io/swig)\n- [marc](https://github.com/bredele/marc)\n- nunjucks _(pending)_\n- haml-coffee _(pending)_\n- dust _(pending)_\n- underscore _(pending)_\n- toffee _(pending)_\n\n#### CSS\n\n- [stylus](http://learnboost.github.io/stylus/)\n- [scss](https://github.com/andrew/node-sass)\n- [less](https://github.com/less/less.js/)\n- [myth](https://github.com/segmentio/myth)\n\n#### JavaScript\n\n- [coffeescript](http://coffeescript.org/)\n- [dogescript](https://github.com/remixz/dogescript)\n- [coco](https://github.com/satyr/coco)\n- [livescript](https://github.com/gkz/LiveScript)\n\n#### Minifiers\n\n- [minify-js](https://github.com/mishoo/UglifyJS2)\n- [minify-css](https://github.com/GoalSmashers/clean-css)\n- [minify-html](https://github.com/kangax/html-minifier)\n- [csso](https://github.com/css/csso)\n\n### Languages Supporting Compilation\n\nAccord can also compile templates into JavaScript functions, for some languages. This is really useful for client-side rendering. Languages with compile support are listed below. If you try to compile a language without support for it, you will get an error.\n\n- jade\n- ejs\n- handlebars\n- mustache\n\nWe are always looking to add compile support for more languages, but it can be difficult, as client-side template support isn't always the first thing on language authors' minds. Any contributions that help to expand this list are greatly appreciated!\n\nWhen using a language supporting client-side templates, make sure to check the [docs](docs) for that language for more details. In general, you'll get back a stringified function from the `compileClient` or `compileFileClient` methods, and a string of client helpers from the `clientHelpers` methods. You can take these, organize them, and write them to files however you wish. Usually the best way is to write the helpers to a file first, then iterate through each of the client-compiled functions, assigning them a name so they can be accessed later on.\n\n### Adding Languages\n\nWant to add more languages? We have put extra effort into making the adapter pattern structure understandable and easy to add to and test. Rather than requesting that a language be added, please add a pull request and add it yourself! We are quite responsive and will quickly accept if the implementation is well-tested.\n\nDetails on running tests and contributing [can be found here](contributing.md)\n\n### License\n\nLicensed under [MIT](license.md)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/jenius/accord/issues"
  },
  "homepage": "https://github.com/jenius/accord",
  "_id": "accord@0.11.1",
  "_from": "accord@^0.11.1"
}
